{"version":3,"sources":["js/task-01.js","js/task-02.js","js/task-03.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.3d1c27b8.js","sourceRoot":"..\\src","sourcesContent":["// Напиши функцию`delay(ms)`, которая возвращает промис, переходящий в состояние\r\n//     `\"resolved\"` через`ms` миллисекунд.Значением исполнившегося промиса должно\r\n// быть то кол - во миллисекунд которое передали во время вызова функции`delay`.\r\n\r\n// ```js\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","// Перепиши функцию`toggleUserState()` так, чтобы она не использовала\r\n// callback - функцию`callback`, а принимала всего два параметра`allUsers` и\r\n//     `userName` и возвращала промис.\r\n\r\n// ```js\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Перепиши функцию`makeTransaction()` так, чтобы она не использовала\r\n// callback - функции`onSuccess` и`onError`, а принимала всего один параметр\r\n//     `transaction` и возвращала промис.\r\n\r\n// ```js\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}.Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","import './css/common.css';\r\nimport './js/task-01';\r\nimport './js/task-02';\r\nimport './js/task-03';\r\n"]}