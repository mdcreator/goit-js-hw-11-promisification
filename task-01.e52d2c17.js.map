{"version":3,"sources":["js/task-01.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":";AAMA,IAAMA,EAAQ,SAAAC,GAEL,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQF,IACPA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,SAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ","file":"task-01.e52d2c17.js","sourceRoot":"..\\src","sourcesContent":["// Напиши функцию`delay(ms)`, которая возвращает промис, переходящий в состояние\r\n//     `\"resolved\"` через`ms` миллисекунд.Значением исполнившегося промиса должно\r\n// быть то кол - во миллисекунд которое передали во время вызова функции`delay`.\r\n\r\n// ```js\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n"]}